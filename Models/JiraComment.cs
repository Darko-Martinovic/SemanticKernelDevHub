namespace SemanticKernelDevHub.Models;

/// <summary>
/// Represents a comment on a Jira ticket
/// </summary>
public class JiraComment
{
    /// <summary>
    /// Unique identifier for the comment
    /// </summary>
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// Comment body text
    /// </summary>
    public string Body { get; set; } = string.Empty;

    /// <summary>
    /// Author of the comment
    /// </summary>
    public string Author { get; set; } = string.Empty;

    /// <summary>
    /// Author's display name
    /// </summary>
    public string AuthorDisplayName { get; set; } = string.Empty;

    /// <summary>
    /// Date when the comment was created
    /// </summary>
    public DateTime CreatedDate { get; set; } = DateTime.Now;

    /// <summary>
    /// Date when the comment was last updated
    /// </summary>
    public DateTime? UpdatedDate { get; set; }

    /// <summary>
    /// Whether the comment is internal/private
    /// </summary>
    public bool IsInternal { get; set; } = false;

    /// <summary>
    /// Creates a formatted comment for code review results
    /// </summary>
    /// <param name="reviewResult">Code review result</param>
    /// <param name="author">Comment author</param>
    /// <returns>Formatted Jira comment</returns>
    public static JiraComment CreateCodeReviewComment(CodeReviewResult reviewResult, string author = "Semantic Kernel DevHub")
    {
        var body = $@"ðŸ¤– **Automated Code Review Results**

**Overall Score**: {reviewResult.OverallScore}/10
**Review Date**: {reviewResult.Metadata.ReviewDate:yyyy-MM-dd HH:mm}
**Files Analyzed**: {reviewResult.Metadata.TotalFilesAnalyzed}
**Review Duration**: {reviewResult.Metadata.ReviewDuration.TotalSeconds:F1} seconds

**Summary**:
{reviewResult.Summary}

**Key Issues**:
{(reviewResult.KeyIssues.Any() ? string.Join("\n", reviewResult.KeyIssues.Select(i => $"â€¢ {i}")) : "No significant issues found")}

**Recommendations**:
{(reviewResult.Recommendations.Any() ? string.Join("\n", reviewResult.Recommendations.Select(r => $"â€¢ {r}")) : "No specific recommendations")}

**File Reviews**:
{string.Join("\n", reviewResult.FileReviews.Take(5).Select(f => $"â€¢ {f.FileName} ({f.Language}): {f.Score}/10"))}
{(reviewResult.FileReviews.Count > 5 ? $"... and {reviewResult.FileReviews.Count - 5} more files" : "")}

---
*This comment was automatically generated by Semantic Kernel DevHub*";

        return new JiraComment
        {
            Body = body,
            Author = author,
            AuthorDisplayName = author,
            CreatedDate = DateTime.Now
        };
    }

    /// <summary>
    /// Creates a formatted comment for meeting action items
    /// </summary>
    /// <param name="actionItems">List of action items</param>
    /// <param name="author">Comment author</param>
    /// <returns>Formatted Jira comment</returns>
    public static JiraComment CreateActionItemsComment(List<ActionItem> actionItems, string author = "Semantic Kernel DevHub")
    {
        var body = $@"ðŸ“‹ **Meeting Action Items Update**

**Total Action Items**: {actionItems.Count}
**Generated**: {DateTime.Now:yyyy-MM-dd HH:mm}

**Action Items**:
{string.Join("\n", actionItems.Select((item, index) => $@"
**{index + 1}. {item.Description}**
â€¢ **Assigned To**: {item.AssignedTo ?? "Unassigned"}
â€¢ **Priority**: {item.Priority}
â€¢ **Due Date**: {item.DueDate?.ToString("yyyy-MM-dd") ?? "Not specified"}
â€¢ **Context**: {item.Notes ?? "No additional context"}
{(string.IsNullOrEmpty(item.Notes) ? "" : $"â€¢ **Notes**: {item.Notes}")}"))}

---
*This comment was automatically generated from meeting analysis by Semantic Kernel DevHub*";

        return new JiraComment
        {
            Body = body,
            Author = author,
            AuthorDisplayName = author,
            CreatedDate = DateTime.Now
        };
    }

    /// <summary>
    /// Creates a general purpose comment with ADF formatting
    /// </summary>
    /// <param name="message">Comment message</param>
    /// <param name="author">Comment author</param>
    /// <param name="isInternal">Whether comment is internal</param>
    /// <returns>Formatted Jira comment</returns>
    public static JiraComment CreateGeneralComment(string message, string author = "Semantic Kernel DevHub", bool isInternal = false)
    {
        return new JiraComment
        {
            Body = message,
            Author = author,
            AuthorDisplayName = author,
            CreatedDate = DateTime.Now,
            IsInternal = isInternal
        };
    }

    /// <summary>
    /// Converts the comment to Atlassian Document Format (ADF) for Jira API
    /// </summary>
    /// <returns>ADF representation of the comment</returns>
    public object ToADF()
    {
        return new
        {
            type = "doc",
            version = 1,
            content = new[]
            {
                new
                {
                    type = "paragraph",
                    content = new[]
                    {
                        new
                        {
                            type = "text",
                            text = Body
                        }
                    }
                }
            }
        };
    }

    /// <summary>
    /// Gets a truncated version of the comment for display
    /// </summary>
    /// <param name="maxLength">Maximum length of truncated text</param>
    /// <returns>Truncated comment body</returns>
    public string GetTruncatedBody(int maxLength = 100)
    {
        if (Body.Length <= maxLength)
            return Body;

        return Body.Substring(0, maxLength - 3) + "...";
    }

    /// <summary>
    /// Checks if the comment contains specific keywords
    /// </summary>
    /// <param name="keywords">Keywords to search for</param>
    /// <returns>True if comment contains any of the keywords</returns>
    public bool ContainsKeywords(params string[] keywords)
    {
        return keywords.Any(keyword => Body.Contains(keyword, StringComparison.OrdinalIgnoreCase));
    }

    /// <summary>
    /// Gets formatted display text for the comment
    /// </summary>
    /// <returns>Formatted comment display</returns>
    public string GetFormattedDisplay()
    {
        var truncatedBody = GetTruncatedBody(150);
        return $@"ðŸ’¬ **{AuthorDisplayName}** - {CreatedDate:MMM dd, yyyy HH:mm}
{truncatedBody}
{(UpdatedDate.HasValue ? $"*(edited {UpdatedDate:MMM dd, yyyy HH:mm})*" : "")}";
    }

    public override string ToString() => $"{Author}: {GetTruncatedBody(50)}";
}
